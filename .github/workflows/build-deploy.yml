name: Build and Deploy

# on: [push]

permissions:
  contents: read
  deployments: write
  id-token: write

jobs:
  build:
    name: Build Site
    runs-on: ubuntu-20.04
    env:
      HUGO_VERSION: 0.145.0
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Use Node v20
        uses: actions/setup-node@v3
        with:
          node-version: 20.9.0

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        id: pnpm-install
        with:
          version: 9
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Install Dart Sass Embedded
        run: sudo snap install dart-sass-embedded

      - name: Use Go
        uses: actions/setup-go@v5
        with:
          go-version: '^1.13.1'

      - name: Install Hugo
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb

      - name: Clean Output
        run: npm run clean

      - name: Build Site
        env:
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: npm run build:prod

      - name: Index Pagefind
        run: npx pagefind --source "dist"

      - name: Upload Output
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: ./dist
          overwrite: true

  social:
    name: Generate Social Images
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Use Node v20
        uses: actions/setup-node@v3
        with:
          node-version: 20.9.0

      - name: Install serve
        run: npm i -g serve@14.2.4

      - name: Download Output
        uses: actions/download-artifact@v4
        with:
          name: dist
          # this is done to match the expected output directory
          path: ~/work/wiki/wiki/dist

      - name: Use Go
        uses: actions/setup-go@v5
        with:
          go-version: '^1.13.1'

      - name: Install Go Rod Dependencies
        run: sudo apt-get install -y libgbm-dev

      - name: Install Script Dependencies
        run: go mod download

      - name: Build binary
        run: go build scripts/postbuild.go

      - name: Run Social Images Script
        run: npm run post

      - name: Upload Output
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: ~/work/wiki/wiki/dist
          overwrite: true

  deploy:
    name: Deploy to Cloudflare Pages
    runs-on: ubuntu-20.04
    env:
      CLOUDFLARE_API_TOKEN: ${{secrets.CLOUDFLARE_API_TOKEN}}
      ACCOUNT_ID: ${{secrets.ACCOUNT_ID}}
      PROJECT_NAME: ${{secrets.PROJECT_NAME}}
      DIRECTORY: ${{secrets.DIRECTORY}}
      GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
    needs: [build, social]
    steps:
      - name: Download Output
        uses: actions/download-artifact@v4
        with:
          name: dist
          # this is done to match the expected output directory
          path: ~/work/wiki/wiki/dist

      - name: Publish
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{secrets.CLOUDFLARE_API_TOKEN}}
          accountId: ${{secrets.ACCOUNT_ID}}
          projectName: ${{secrets.PROJECT_NAME}}
          directory: ${{secrets.DIRECTORY}}
          gitHubToken: ${{secrets.GITHUB_TOKEN}}
